# -*- coding: utf-8 -*-
import os
import re
import shutil

'''
 This is a script to translate sub English to Vietnamese.
 Copy files to vn folder.
'''

# Danh s√°ch t·ª´ kh√≥a c·∫ßn thay th·∫ø
translations = {
    ("Family", "Families"): "Gia ƒë√¨nh",
    ("Father", "Fathers"): "Cha",
    "Mother": "M·∫π",
    ("Parents", "Parent"): "Cha M·∫π",
    "Spouse": "V·ª£/Ch·ªìng",
    ("Person", "Persons"): "Nh√¢n v·∫≠t",
    "Children" : "Con c√°i",
    "Child" : "Con",
    "Focused Person Chart": "Nh√¢n v·∫≠t trung t√¢m",
    "Person Chart": "Ph·∫£ h·ªá",
    "List of ": "Danh s√°ch ",
    "Date of ": "Ng√†y ",
    ("Source", "Sources"): "Ngu·ªìn tham chi·∫øu",
    "Statistics": "Th·ªëng k√™",
    ("Partner", "Partners"): "V·ª£/Ch·ªìng",
    "Name": "T√™n",
    "Gender": "Gi·ªõi t√≠nh",
    "Male": "Nam",
    "Female": "N·ªØ",
    "Birth": "Sinh",
    "Date of Birth": "Ng√†y sinh",
    "Place of Birth": "N∆°i sinh",
    "Death": "M·∫•t",
    "Date of Death": "Ng√†y m·∫•t",
    "Place of Death": "N∆°i m·∫•t",
    "Genealogy": "Gia ph·∫£",
    "Family Tree": "C√¢y gia ph·∫£",
    "Home": "Trang ch·ªß",
    "Search": "T√¨m ki·∫øm",
    "Edit": "Ch·ªânh s·ª≠a",
    "Delete": "X√≥a",
    "Save": "L∆∞u",
    "Print": "In",
    "Export": "Xu·∫•t",
    ("Settings", "Setup"): "C√†i ƒë·∫∑t",
    "Login": "ƒêƒÉng nh·∫≠p",
    "Logout": "ƒêƒÉng xu·∫•t",
    "Imprint": "Li√™n h·ªá",
    ("Events", "Event"): "S·ª± ki·ªán",
    ("Facts", "Fact"): "ƒê·∫∑c ƒëi·ªÉm sinh h·ªçc",
    "Statistic Charts": "Bi·ªÉu ƒë·ªì Th·ªëng k√™",
    "Event Type" : "Lo·∫°i S·ª± ki·ªán",
    "Date" : "Ng√†y",
    "Place" : "ƒê·ªãa ƒëi·ªÉm",
    ("Descriptions", "Description") : "M√¥ t·∫£",
    "Media" : "Media / H√¨nh ·∫£nh/Video/Audio",
    ("Pictures", "Picture"): "H√¨nh ·∫£nh",
    "Family Name" : "T√™n Gia ƒë√¨nh",
    "Man" : "Cha",
    "Woman" : "M·∫π",
    ("Notes", "Note") : "Ghi ch√∫",
    ("Additional Names",  "Additional Name") : "Danh x∆∞ng/T√™n kh√°c",

    "Time & Dates": "Ng√†y & Th·ªùi gian",
    "Total Families" : "T·ªïng s·ªë Gia ƒë√¨nh",
    "Married Families" : "S·ªë gia ƒë√¨nh ch∆∞a ly h√¥n",
    "Divorced Families" : "S·ªë gia ƒë√¨nh ly h√¥n",
    "Total Persons" : "S·ªë C√° nh√¢n",
    "Male persons" : "S·ªë ƒë√†n √¥ng",
    "Female persons" : "S·ªë ph·ª• n·ªØ",
    "Persons with unknown gender" : "Gi·ªõi t√≠nh kh√¥ng x√°c ƒë·ªãnh",
    "Intersex persons" : "ƒêa gi·ªõi t√≠nh",
    "Person Events" : "S·ª± ki·ªán Nh√¢n v·∫≠t",
    "Family Events" : "S·ª± ki·ªán Gia ƒë√¨nh",
    "Earliest Date" : "Ng√†y s·ªõm nh·∫•t",
    "Latest Date"   : "Ng√†y g·∫ßn nh·∫•t",
    "Age at Death" : "Tu·ªïi khi m·∫•t",
    "Age at Retirement" : "Tu·ªïi ngh·ªâ h∆∞u",
    "Age at Marriage" : "Tu·ªïi khi k·∫øt h√¥n",
    "Age at Divorce" : "Tu·ªïi khi ly h√¥n",
    "Age of Parents at Birth of Child" : "Tu·ªïi b·ªë m·∫π khi sinh con",
    "Age of Child at Parents Death" : "Tu·ªïi con khi b·ªë m·∫π m·∫•t",
    "Age of Person at Death of Partner" : "Tu·ªïi c·ªßa V·ª£/Ch·ªìng khi Ch·ªìng/V·ª£ m·∫•t",
    "Time between Marriage and Birth of Child" : "Th·ªùi gian gi·ªØa K·∫øt h√¥n v√† Sinh con",
    "Last Name Distribution" : "Bi·ªÉu ƒë·ªì Ph√¢n ph·ªëi theo H·ªç",
    "First Name Distribution" : "Bi·ªÉu ƒë·ªì Ph√¢n ph·ªëi theo T√™n",
    "Title Distribution" : "Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi theo Ch·ª©c danh",
    "Year of Birth" : "Bi·ªÉu ƒë·ªì theo NƒÉm sinh",
    "Year of Death" : "Bi·ªÉu ƒë·ªì theo nƒÉm m·∫Øt",
    "Year of Burial" : "NƒÉm ch√¥n c·∫•t",
    "Month of Birth" : "Bi·ªÉu ƒë·ªì ng√†y sinh theo Th√°ng",
    "Month of Death" : "Bi·ªÉu ƒë·ªì ng√†y m·∫•t theo Th√°ng",
    "Month of Marriage" : "Bi·ªÉu ƒë·ªì ng√†y K·∫øt h√¥n theo Th√°ng",
    "Children per Family" : "S·ªë con trong Gia ƒë√¨nh",
    "Country of Birth" : "Th·ªëng k√™ Sinh theo Qu·ªëc gia",
    "Country of Death" : "N∆°i m·∫•t theo Qu·ªëc gia",
    "Place of Marriage" : "N∆°i K·∫øt h√¥n theo ƒë·ªãa ph∆∞∆°ng",
    "Country of Marriage" : "N∆°i K·∫øt h√¥n theo Qu·ªëc gia",
    "Event or Fact Types" : "Lo·∫°i S·ª± ki·ªán ho·∫∑c ƒê·∫∑c ƒëi·ªÉm",
    "Webpage created with MacFamilyTree 10 for macOS" : "Qu·∫£n tr·ªã vi√™n: Phan Trung L√¢m, @Copyright 2025 Phan Ng√¥ ƒê·∫°i t·ªôc",
    "Author Contact" : "Li√™n h·ªá T√°c gi·∫£",
    "Synium Contact": "Ban ƒë·∫°i di·ªán Gia t·ªôc",
    "Company" : "Gia t·ªôc",
    "Synium Software GmbH Germany" : "H·ªç Phan Ng√¥ T·ªëng VƒÉn",
    "www.syniumsoftware.com" : "https://www.blogger.com/blog/posts/3754450817356124571",
    "Mac App Store" : "Phi√™n b·∫£n",
    "MacFamilyTree 10": "Ph√°t h√†nh 1.0",
    "Entries assigned to this media" : "H√¨nh ·∫£nh ƒë∆∞·ª£c d√πng v·ªõi"

}

# ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c ch·ª©a c√°c file g·ªëc v√† ƒë√≠ch
SRC_LANG = "languages/en"
DEST_LANG = "languages/vn"
LOG_FILE = "translation_log.txt"

# Chu·ªói c·∫ßn t√¨m v√† thay th·∫ø trong ƒë∆∞·ªùng d·∫´n
old_string = "/languages/en/"
new_string = "/languages/vn/"
pattern = re.compile(re.escape(old_string))

# S·∫Øp x·∫øp danh s√°ch thay th·∫ø theo ƒë·ªô d√†i gi·∫£m d·∫ßn ƒë·ªÉ ƒë·∫£m b·∫£o c·ª•m t·ª´ d√†i ƒë∆∞·ª£c d·ªãch tr∆∞·ªõc
sorted_translations = sorted(
    [(en, vi) for keys, vi in translations.items() for en in (keys if isinstance(keys, tuple) else [keys])],
    key=lambda x: -len(x[0])
)


def process_html(file_path, new_file_path):
    """D·ªãch n·ªôi dung file HTML v√† s·ª≠a ƒë∆∞·ªùng d·∫´n"""
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            content = file.read()

        # D·ªãch n·ªôi dung
        changes = []
        for en, vi in sorted_translations:
            if " " in en:
                new_content, count = re.subn(re.escape(en), vi, content)
            else:
                new_content, count = re.subn(rf"\b{re.escape(en)}\b", vi, content)

            if count > 0:
                changes.append(f"{en} -> {vi} ({count} l·∫ßn)")
            content = new_content

        # S·ª≠a ƒë∆∞·ªùng d·∫´n `languages/en/` th√†nh `languages/vn/`
        content = pattern.sub(new_string, content)

        # L∆∞u file ƒë√£ ch·ªânh s·ª≠a
        os.makedirs(os.path.dirname(new_file_path), exist_ok=True)
        with open(new_file_path, "w", encoding="utf-8") as file:
            file.write(content)

        # Ghi log n·∫øu c√≥ thay ƒë·ªïi
        if changes:
            with open(LOG_FILE, "a", encoding="utf-8") as log:
                log.write(f"Translated: {file_path} -> {new_file_path}\n")
                for change in changes:
                    log.write(f"  {change}\n")
                log.write("\n")

        print(f"‚úÖ ƒê√£ x·ª≠ l√Ω: {file_path} -> {new_file_path}")

    except Exception as e:
        print(f"‚ùå L·ªói khi x·ª≠ l√Ω {file_path}: {e}")


def process_all_files(src, dest):
    """Duy·ªát qua t·∫•t c·∫£ file HTML trong th∆∞ m·ª•c v√† x·ª≠ l√Ω"""
    if not os.path.exists(dest):
        shutil.copytree(src, dest)

    for root, _, files in os.walk(dest):
        for file in files:
            if file.endswith(".html"):
                src_path = os.path.join(root, file)
                dest_path = src_path.replace(src, dest, 1)
                process_html(src_path, dest_path)


def modify_index_html(index_path):
    """Ch·ªânh s·ª≠a index.html ƒë·ªÉ c√≥ menu ch·ªçn ng√¥n ng·ªØ"""
    try:
        with open(index_path, "r", encoding="utf-8") as file:
            content = file.read()

        # Th√™m menu ch·ªçn ng√¥n ng·ªØ n·∫øu ch∆∞a c√≥
        language_menu = '''
        <div id="language-switch">
            <a href="javascript:setLanguage('en');">English</a> | 
            <a href="javascript:setLanguage('vn');">Ti·∫øng Vi·ªát</a>
        </div>
        '''

        if "id=\"language-switch\"" not in content:
            content = content.replace("<body>", f"<body>\n{language_menu}")

            with open(index_path, "w", encoding="utf-8") as file:
                file.write(content)

            print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t index.html v·ªõi menu ch·ªçn ng√¥n ng·ªØ.")

    except Exception as e:
        print(f"‚ùå L·ªói khi ch·ªânh s·ª≠a index.html: {e}")


# Ch·∫°y ch∆∞∆°ng tr√¨nh
modify_index_html("index.html")
modify_index_html(SRC_LANG+"/index.html")
process_all_files(SRC_LANG, DEST_LANG)


print("üéâ Ho√†n t·∫•t x·ª≠ l√Ω trang web!")
